<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:smtps="http://www.mulesoft.org/schema/mule/smtps"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:jdbc-ee="http://www.mulesoft.org/schema/mule/ee/jdbc"
	xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:tcp="http://www.mulesoft.org/schema/mule/tcp" xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp"
	xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper" xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc"
	xmlns:hl7="http://www.mulesoft.org/schema/mule/hl7" xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:spring="http://www.springframework.org/schema/beans"
	version="EE-3.4.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/smtps http://www.mulesoft.org/schema/mule/smtps/current/mule-smtps.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.mulesoft.org/schema/mule/hl7 http://www.mulesoft.org/schema/mule/hl7/current/mule-hl7.xsd
http://www.mulesoft.org/schema/mule/tcp http://www.mulesoft.org/schema/mule/tcp/current/mule-tcp.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/5.0/mule-sfdc.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.mulesoft.org/schema/mule/ee/jdbc http://www.mulesoft.org/schema/mule/ee/jdbc/current/mule-jdbc-ee.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd">
	<mulexml:namespace-manager includeConfigNamespaces="true">
		<mulexml:namespace prefix="hl7xml" uri="urn:hl7-org:v2xml" />
	</mulexml:namespace-manager>
	<sfdc:config name="UCSF_SF_Connection" username="${salesforce.username}" password="${salesforce.password}"
		securityToken="${salesforce.securitytoken}" url="${salesforce.mc.endpoint}" doc:name="Salesforce">
		<sfdc:connection-pooling-profile initialisationPolicy="INITIALISE_ONE"
			exhaustedAction="WHEN_EXHAUSTED_GROW" />
		<reconnect frequency="10000" count="50" />
	</sfdc:config>
	<hl7:connector name="hl7" doc:name="HL7 Connector">
		<receiver-threading-profile maxBufferSize="30" maxThreadsActive="25" maxThreadsIdle="25" />
	</hl7:connector>
	<data-mapper:config name="a01xml2pv1-2.4_grf" transformationGraphPath="a01xml2pv1-2.4.grf" doc:name="DataMapper" />
	<data-mapper:config name="mapvisitrole_grf" transformationGraphPath="mapvisitrole.grf" doc:name="DataMapper" />
	<data-mapper:config name="a01map2map_grf" transformationGraphPath="a01map2map.grf" doc:name="DataMapper" />
	<data-mapper:config name="a01xml2pv1_2_4_grf" transformationGraphPath="a01xml2pv1-2.4.grf" doc:name="DataMapper" />
	<data-mapper:config name="maproletoobject_grf" transformationGraphPath="maproletoobject.grf"
		doc:name="DataMapper" />
	<data-mapper:config name="mappatient_1_grf" transformationGraphPath="mappatient_1.grf" doc:name="DataMapper" />
	<data-mapper:config name="mapproletosalesforceobject_grf" transformationGraphPath="mapproletosalesforceobject.grf"
		doc:name="DataMapper" />
	<smtps:connector name="smtpsGmailConnector" fromAddress="ucsfmule@gmail.com" ccAddresses="${mail.touser}" doc:name="SMTP">	 
		<smtps:header key="mail.transport.protocol" value="smtps" />
		<smtps:header key="mail.smtps.auth" value="true" />
		<smtps:header key="mail.smtps.quitwait" value="false" />
		<smtps:tls-client path="/etc/mule/somvs108.ucsf.edu.keystore.jks.new" storePassword="${server.keystorepassword}"/>
		<smtps:tls-trust-store path="greenmail-truststore" storePassword="${server.keystorepassword}"/>
		</smtps:connector>	
	<configuration defaultExceptionStrategy-ref="Global_Catch_Exception_Strategy" doc:name="Configuration" />
	<catch-exception-strategy name="Global_Catch_Exception_Strategy">
		 <enricher doc:name="Message Enricher"  target="variable:dummy1">
        <processor-chain doc:name="Processor Chain">
          <set-payload value="Error processing HL7 document #[exception]" doc:name="Set Payload ERror"/>
            <flow-ref name="sendemail" doc:name="Flow Reference"/>
           </processor-chain> 
          
        </enricher>
	</catch-exception-strategy>
	<!-- Dead Letter Queue Flow -->
	<byte-array-to-string-transformer name="Byte_Array_to_StringForTCP" doc:name="Byte Array to String" />

	<flow name="ErrorHandlingFlow" doc:name="ErrorHandlingFlow">
		<vm:inbound-endpoint path="DeadLetterQueue" doc:name="VM" />
		<!-- Delete every item uncorrectly inserted. -->
		<logger category="com.ucsf.events" level="ERROR" doc:name="Logger" />
		<flow-ref name="undoProcessing" doc:name="Flow Reference" />
	</flow>
	<sub-flow name="undoProcessing" doc:name="undoProcessing">
		<!-- TODO: Perform undo operations in here. -->
		<logger level="ERROR" message="Undoing operations" doc:name="Logger" />
	</sub-flow>
	<flow name="mule-ucsf-pocFlow1" doc:name="mule-ucsf-pocFlow1" processingStrategy="synchronous">
		<composite-source doc:name="Composite Source">
			<tcp:inbound-endpoint exchange-pattern="request-response" host="0.0.0.0" port="8062"
				responseTimeout="1000000" doc:name="Receive HL7 message" transformer-refs="Byte_Array_to_StringForTCP" />
			<hl7:inbound-endpoint port="8061" host="0.0.0.0" doc:name="HL7 MLLP" />
		</composite-source>
        <logger message="passing request to VM" level="INFO" doc:name="Logger"/>
        	<!-- Removing  default MULE_REPLYTO so that we can response with ACK message only if you want Coverleaf is set to retry only if it doesn't get anything back. We want that to happen for certain case-->
<!-- 		<flow-ref name="processhl7" doc:name="Flow Reference"/> -->
		<request-reply storePrefix="mainFlow">
				<vm:outbound-endpoint path="processhl7vm"> 
			 		 <message-properties-transformer scope="outbound">
            		 <delete-message-property key="MULE_REPLYTO"/>
       				 </message-properties-transformer>
    			</vm:outbound-endpoint>
	
			<vm:inbound-endpoint path="reply"/> 
    	 </request-reply> 
    	 <logger level="INFO" message="Finished flow .Payload #[payload:]" doc:name="Logger"/>
	</flow>
	<sub-flow name="mule-ucsf-insert-patient" doc:name="mule-ucsf-insert-patient">
		<enricher doc:name="Message Enricher">
			<processor-chain doc:name="Processor Chain">
				<byte-array-to-string-transformer doc:name="Byte Array to String" />
				<data-mapper:transform config-ref="mappatient_1_grf" doc:name="DataMapper">
				</data-mapper:transform>

				<logger message="-------#[payload:]" level="DEBUG" doc:name="Logger" />
				<!--logger message="&quot;After DM payload Log MRN &quot; + #[payload[0].MRN_Number__c]" level="INFO" doc:name="Log MRN"/ -->
				<set-variable variableName="mappedPatient" value="#[payload]" doc:name="Set Variable" />
				<processor-chain doc:name="Insert Update Patient">
					<sfdc:query config-ref="UCSF_SF_Connection" doc:name="Lookup Patient"
						query="SELECT mp.Id,Gender__c,Middle_Name__c, MRN_Number__c, Last_Name__c FROM ADT_Patient__c mp WHERE mp.MRN_Number__c='#[payload[0].MRN_Number__c]'">
					</sfdc:query>
					<choice doc:name="Choice">
						<when expression="#[groovy:payload.size() == 0]">
							<sfdc:create config-ref="UCSF_SF_Connection" type="ADT_Patient__c" doc:name="Insert Patient">
								<sfdc:objects ref="#[flowVars['mappedPatient']]" />
							</sfdc:create>
						</when>
						<otherwise>
							<set-variable value="#[payload[0]]" variableName="savedPatient" doc:name="Variable" />
							<sfdc:upsert config-ref="UCSF_SF_Connection" type="ADT_Patient__c" doc:name="Upsert Patient"
								externalIdFieldName="MRN_Number__c">
								<sfdc:objects ref="#[flowVars['mappedPatient']]" />
							</sfdc:upsert>
						</otherwise>
					</choice>
				</processor-chain>
				<set-variable variableName="pId" value="#[payload[0].Id]" doc:name="Set Patient Id" />
				<logger message="&quot;log SFDC Final Return payload&quot; + #[payload]" level="INFO" doc:name="SFDC Lookup Output" />
			</processor-chain>
			<enrich source="#[flowVars.?PCPNO1]" target="#[flowVars['PCPNO1']]" />
			<enrich source="#[flowVars.?PCPNO2]" target="#[flowVars['PCPNO2']]" />
			<enrich source="#[flowVars.?pId]" target="#[flowVars['pId']]" />
			<enrich source="#[flowVars.?savedPatient]" target="#[flowVars['savedPatient']]" />
			<enrich source="#[flowVars.?mappedPatient]" target="#[flowVars['mappedPatient']]" />
		</enricher>
		<enricher doc:name="Message Enricher">
			<flow-ref name="mule-ucsf-insert-patientVisit" doc:name="Insert Patient Visit Flow" />
			<enrich source="#[flowVars.?savedPatientVisit]" target="#[flowVars['savedPatientVisit']]" />
			<enrich source="#[flowVars.?saveInpatientRoles]" target="#[flowVars['saveInpatientRoles']]" />
			<enrich source="#[flowVars.?pVisitId]" target="#[flowVars['pVisitId']]" />
		</enricher>
		<set-variable value="outpatient" variableName="roletype" doc:name="Variable" />
		<enricher doc:name="Message Enricher">
			<flow-ref name="mule-ucsf-insert-role" doc:name="Insert Patient Visit Role Flow" />
			<enrich source="#[flowVars.?saveRoles]" target="#[flowVars['outpatientRoles']]" />
		</enricher>
	</sub-flow>
	<sub-flow name="mule-ucsf-insert-patientVisit" doc:name="mule-ucsf-insert-patientVisit">
		<enricher doc:name="Message Enricher">
			<processor-chain doc:name="Processor Chain">
				<logger message="Log In PatientVisit Flow - #[pId]" level="INFO" doc:name="Log SF Payload" />
				<byte-array-to-string-transformer doc:name="Byte Array to String" />
				<data-mapper:transform config-ref="a01xml2pv1_2_4_grf" doc:name="Transform A01 to Patient Visit">
					<data-mapper:input-arguments>
						<data-mapper:input-argument key="PatientIdentifier">#[pId]</data-mapper:input-argument>
						<data-mapper:input-argument key="eventType">#[eventType]</data-mapper:input-argument>
					</data-mapper:input-arguments>
				</data-mapper:transform>
				<set-variable variableName="mappedPatientVisit" value="#[payload]" doc:name="Saving the mapped Patient" />
				<choice doc:name="Choice">
					<when expression="#[groovy:payload.size() >0 &amp;&amp; payload[0].Patient_Visit_Number__c]">
						<sfdc:query config-ref="UCSF_SF_Connection" doc:name="Lookup Patient Visit"
							query="SELECT Id,ADT_Patient__c, Facility__c, Room__c,Bed__c, Admission_Date__c,Discharge_Date__c, Patient_Visit_Number__c FROM ADT_Patient_Visit__c  WHERE Patient_Visit_Number__c='#[payload[0].Patient_Visit_Number__c]'">
						</sfdc:query>
						<set-variable value="payload.size() &gt; 0 ? payload[0] : null" variableName="savedPatientVisit"
							doc:name="Saved Patient Visit Variable" />
						<set-payload value="#[flowVars['mappedPatientVisit']]" doc:name="Set Payload" />
						<flow-ref name="addSalesforceNullField" doc:name="Flow Reference" />
						<sfdc:upsert config-ref="UCSF_SF_Connection" type="ADT_Patient_Visit__c" doc:name="Upsert Patient visit"
							externalIdFieldName="ExternalKey__c">
							<sfdc:objects ref="#[payload:]" />
						</sfdc:upsert>
						<logger message="Subflow Patient Visit + #[payload]" level="INFO" doc:name="Logger" />
						<set-variable variableName="pVisitId" value="#[payload[0].Id]" doc:name="Set Patient visit Id" />
					</when>
					<otherwise>
						<logger message="No Visit Id" level="INFO" doc:name="Logger" />
					</otherwise>
				</choice>
			</processor-chain>
			<enrich source="#[flowVars.?savedPatientVisit]" target="#[flowVars['savedPatientVisit']]" />
			<enrich source="#[flowVars.?pVisitId]" target="#[flowVars['pVisitId']]" />
		</enricher>
		<message-filter doc:name="Message">
			<expression-filter expression="flowVars['pVisitId'] != null" evaluator="groovy" />
		</message-filter>
		<set-variable value="inpatient" variableName="roletype" doc:name="Variable" />
		<enricher doc:name="Message Enricher">
			<flow-ref name="mule-ucsf-insert-role" doc:name="Insert Patient Visit Role Flow" />
			<enrich source="#[flowVars.?saveRoles]" target="#[flowVars['saveInpatientRoles']]" />
		</enricher>
	</sub-flow>
	<sub-flow name="defaultErrorHandler" doc:name="defaultErrorHandler">
		<logger message="Error occurred: #[payload]" level="ERROR" doc:name="Log Error" />
	</sub-flow>
	<!-- <flow name="testflow" doc:name="testflow"> <file:inbound-endpoint path="/tmp/hl7test/input1" moveToDirectory="/tmp/hl7test/output1" 
		responseTimeout="10000" doc:name="Read File" /> <byte-array-to-string-transformer doc:name="Byte Array to String" /> <set-property 
		propertyName="subject" value="test" doc:name="Property" doc:description="edfda" /> <tcp:outbound-endpoint exchange-pattern="request-response" 
		host="localhost" port="8062" responseTimeout="1000000" doc:name="Post to Main Flow" /> <byte-array-to-string-transformer 
		doc:name="Byte Array to String" /> <logger message="Outcome of HL7 Processing = #[payload]" level="INFO" doc:name="Logger" 
		/> </flow> -->
	
	<sub-flow name="mule-ucsf-insert-role" doc:name="mule-ucsf-insert-role">
		<flow-ref name="getMappedRoles" doc:name="Flow Reference" />
		<enricher doc:name="Enrich Get ucsfIds Ids" target="#[variable:ucsfIds]" source="#[payload]">
			<flow-ref name="getUcsfIds" doc:name="Flow Reference" />
		</enricher>
		<message-filter doc:name="Message">
			<expression-filter expression="ucsfIds != ''" evaluator="groovy" />
		</message-filter>
		<sfdc:query config-ref="UCSF_SF_Connection" doc:name="Lookup for  ucsfId"
			query="SELECT id,UCSF_ID__c FROM Contact where UCSF_ID__c in (#[ucsfIds]) " />
		<set-variable variableName="ucsfid_salesforceid" value="#[payload:]" doc:name="Variable" />
		<flow-ref name="getUpsertRoleListWithOtherIds" doc:name="Flow Reference getUpsertRoleListWithOtherIds" />
		<set-variable variableName="rolesForUpsertList" value="#[payload]" doc:name="save mapped roles Roles" />
		<message-filter doc:name="checkUpsertListSize" doc:description="Don't continue if there rolesForUpsertList blank">
			<expression-filter expression="payload.size()  &gt; 0" evaluator="groovy" />
		</message-filter>
		<data-mapper:transform config-ref="mapproletosalesforceobject_grf" doc:name="DataMapper">
			<data-mapper:input-arguments>
				<data-mapper:input-argument key="patientId">#[pId]</data-mapper:input-argument>
				<data-mapper:input-argument key="patientVisitId">#[flowVars.?pVisitId]</data-mapper:input-argument>
				<data-mapper:input-argument key="roletype">#[flowVars.?roletype]</data-mapper:input-argument>
			</data-mapper:input-arguments>
		</data-mapper:transform>
		<set-variable variableName="mappedrolesForUpsertList" value="#[payload]" doc:name="save mapped roles Roles" />
		<choice doc:name="Choice">
			<when expression="#[groovy:roletype == 'inpatient']">
				<sfdc:query config-ref="UCSF_SF_Connection"
					query="SELECT ADT_Patient__c, Id, ADT_Patient_Visit__c, Active__c, Provider__c, ExternalKey__c  FROM ADT_Patient_Visit_Care_Role__c where ADT_Patient__c ='#[pId]' and ADT_Patient_Visit__c='#[pVisitId]'  and Active__c=true"
					doc:name="Salesforce" />
			</when>
			<otherwise>
				<sfdc:query config-ref="UCSF_SF_Connection"
					query="SELECT ADT_Patient__c, Id, Active__c, Provider__c, ExternalKey__c FROM ADT_Patient_Care_Role__c where ADT_Patient__c ='#[pId]'   and Active__c=true"
					doc:name="Salesforce" />
			</otherwise>
		</choice>
		
		<set-variable variableName="saveRoles" value="#[payload]" doc:name="save current Roles" />
	
		<flow-ref name="getFinalRolesToUpsert" doc:name="Flow Reference" />
	    <flow-ref name="addSalesforceNullField" doc:name="handle salesforce null" />
		<choice doc:name="Choice">
			<when expression="roletype == 'inpatient'">
				<sfdc:upsert config-ref="UCSF_SF_Connection" externalIdFieldName="ExternalKey__c" type="ADT_Patient_Visit_Care_Role__c"
					doc:name="Salesforce">
					<sfdc:objects ref="#[payload]" />
				</sfdc:upsert>
			</when>
			<otherwise>
				<sfdc:upsert config-ref="UCSF_SF_Connection" externalIdFieldName="ExternalKey__c" type="ADT_Patient_Care_Role__c"
					doc:name="Salesforce">
					<sfdc:objects ref="#[payload]" />
				</sfdc:upsert>
			</otherwise>
		</choice>
		<logger level="DEBUG" doc:name="Logger" />
	</sub-flow>
<!-- 	<flow name="mule-ucsf-admit-hospitalFlow1" doc:name="mule-ucsf-admit-hospitalFlow1"> -->
<!-- 		<sfdc:query config-ref="UCSF_SF_Connection" -->
<!-- 			query="SELECT ADT_Patient__c, Id,  Active__c, Provider__c, Primary_Care_Provider__c,ExternalKey__c FROM ADT_Patient_Care_Role__c where ADT_Patient__c ='#[pId]'  and Active__c=true" -->
<!-- 			doc:name="Salesforce" /> -->
<!-- 	</flow> -->
	<sub-flow name="getMappedRoles" doc:name="getMappedRoles">
		<set-variable variableName="orginalXML" value="#[payload:]" doc:name="save originalXML" />
		
		<!-- Had to use XSLT  because of limitation of Mule mapper to distinguish between ROL that came in same level but different position. -->
		<mulexml:xslt-transformer maxIdleTransformers="2" maxActiveTransformers="5" doc:name="XSLT"
			returnClass="java.lang.String">
			<mulexml:xslt-text>
				<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:hl7xml="urn:hl7-org:v2xml"
					version="2.0">
					<xsl:param name="roletype" />
					<xsl:output indent="yes" />
					<xsl:template match="/">
						<ROLS>
							<xsl:for-each
								select="if ($roletype='inpatient' ) then //hl7xml:ADT_A01/hl7xml:PV1//following-sibling::hl7xml:ROL else /hl7xml:ADT_A01/hl7xml:PV1//preceding-sibling::hl7xml:ROL">
								<ROL>
									<ROLEID>
										<xsl:value-of select="hl7xml:ROL.1/hl7xml:EI.1" />
									</ROLEID>
									<ROLTYPE>
										<xsl:value-of select="hl7xml:ROL.3/hl7xml:CE.1" />
									</ROLTYPE>
									<STARTDATE>
										<xsl:value-of select="hl7xml:ROL.5/hl7xml:TS.1" />		
									</STARTDATE>
									<ENDDATE>
										<xsl:value-of select="hl7xml:ROL.6/hl7xml:TS.1" />		
									</ENDDATE>
									<xsl:for-each select="hl7xml:ROL.4">
										<xsl:choose>
											<!-- HL7 doesn't tell you if it is MSO or UCSFID have to do this logic -->
											<xsl:when test="(starts-with(hl7xml:XCN.1,'02') and string-length(hl7xml:XCN.1) = 9) or (string-length(hl7xml:XCN.1) = 8 and hl7xml:XCN.13 = 'GenericID')">
												<UCSFID>
													<xsl:value-of select="hl7xml:XCN.1" />
												</UCSFID>
												<FIRSTNAME>
													<xsl:value-of select="hl7xml:XCN.2/hl7xml:FN.1" />
												</FIRSTNAME>
												<LASTNAME>
													<xsl:value-of select="hl7xml:XCN.3" />
												</LASTNAME>
												<MIDDLENAME>
													<xsl:value-of select="hl7xml:XCN.4" />
												</MIDDLENAME>
												
											</xsl:when>
											<xsl:otherwise>
												<MSO>
													<xsl:value-of select="hl7xml:XCN.1" />
												</MSO>
											</xsl:otherwise>
										</xsl:choose>'
<!-- 										<xsl:if test="position() = '1'"> -->
									</xsl:for-each>
								</ROL>
							</xsl:for-each>
						</ROLS>
					</xsl:template>
				</xsl:stylesheet>
			</mulexml:xslt-text>
			<mulexml:context-property key="roletype" value="#[flowVars['roletype']]" />
		</mulexml:xslt-transformer>
		<data-mapper:transform config-ref="maproletoobject_grf" doc:name="DataMapper" />
		<set-variable variableName="patientADTROLs" value="#[payload:]" doc:name="patientRolsVariable" />
	</sub-flow>
	<sub-flow name="SaveADT" doc:name="SaveADT">
		<sfdc:create-single config-ref="UCSF_SF_Connection" type="ADT_Message__c" doc:name="Salesforce">
			<sfdc:object>
				<sfdc:object key="ADT_String__c">#[payload]</sfdc:object>
			</sfdc:object>
		</sfdc:create-single>
	
	</sub-flow>
	<sub-flow name="updateSalesforce" doc:name="updateSalesforce">
		<sfdc:upsert config-ref="UCSF_SF_Connection" externalIdFieldName="MRN_Number__c" type="ADT_Patient__c"
			doc:name="Salesforce">
			<sfdc:objects>
				<sfdc:object>
				
					<sfdc:inner-object key="MuleUpdateDatetime__c">#[groovy:new GregorianCalendar()]</sfdc:inner-object>
				   <sfdc:inner-object key="MRN_Number__c">#[mappedPatient[0].MRN_Number__c]</sfdc:inner-object>
				</sfdc:object>
			</sfdc:objects>
		</sfdc:upsert>
		<sfdc:upsert config-ref="UCSF_SF_Connection" externalIdFieldName="Id" type="ADT_Message__c" doc:name="Salesforce">
			<sfdc:objects>
				<sfdc:object>
					<sfdc:inner-object key="Id">#[messageId]</sfdc:inner-object>
					<sfdc:inner-object key="ADT_Patient__c">#[flowVars.?pId]</sfdc:inner-object>
					<sfdc:inner-object key="log__c">#[groovy:warnings.toString()]</sfdc:inner-object>
					<sfdc:inner-object key="eventType__c">#[flowVars.?eventType]</sfdc:inner-object>
					<sfdc:inner-object key="ControlID__c">#[flowVars.?controlID]</sfdc:inner-object>
					<sfdc:inner-object key="LogLevel__c">#[groovy:warnings.toString().length() > 0 ? "WARN" : "INFO"]</sfdc:inner-object>
				</sfdc:object>
			</sfdc:objects>
		</sfdc:upsert>
	</sub-flow>
	<sub-flow name="messageUnsupportedLogging" doc:name="messageUnsupportedLogging">
		<sfdc:upsert config-ref="UCSF_SF_Connection" externalIdFieldName="Id" type="ADT_Message__c" doc:name="Salesforce">
			<sfdc:objects>
				<sfdc:object>
					<sfdc:inner-object key="log__c">#[payload] </sfdc:inner-object>
					<sfdc:inner-object key="eventType__c">#[flowVars.?eventType]</sfdc:inner-object>
					<sfdc:inner-object key="LogLevel__c">WARN</sfdc:inner-object>
				</sfdc:object>
			</sfdc:objects>
		</sfdc:upsert>
	</sub-flow>
	<sub-flow name="messageErrorLogging" doc:name="messageErrorLogging">
		<sfdc:upsert config-ref="UCSF_SF_Connection" externalIdFieldName="Id" type="ADT_Message__c" doc:name="Salesforce">
			<sfdc:objects>
				<sfdc:object>
					<sfdc:inner-object key="Id">#[messageId]</sfdc:inner-object>
					<sfdc:inner-object key="ADT_Patient__c">#[flowVars.?pId]</sfdc:inner-object>
					<sfdc:inner-object key="log__c">Error Payload #[payload]\n exception #[exception] </sfdc:inner-object>
					<sfdc:inner-object key="eventType__c">#[flowVars.?eventType]</sfdc:inner-object>
					<sfdc:inner-object key="ControlID__c">#[flowVars.?controlID]</sfdc:inner-object>
					<sfdc:inner-object key="LogLevel__c">ERROR</sfdc:inner-object>
				</sfdc:object>
			</sfdc:objects>
		</sfdc:upsert>
	</sub-flow>
	<flow name="dummyhl7Flow1" doc:name="dummyhl7Flow1">
		<http:inbound-endpoint exchange-pattern="request-response" host="0.0.0.0" port="9000" doc:name="HTTP" />
		<set-payload value="OK" doc:name="Set Payload" />
	</flow>
	<sub-flow name="sendemail" doc:name="sendemail">
			<smtps:outbound-endpoint 
			connector-ref="smtpsGmailConnector"
			user="${smtp.user}" 
			password="${smtp.password}" 
			host="${smtp.host}"
			subject="Error Occured Please Check" doc:name="SMTP">
		</smtps:outbound-endpoint>
	</sub-flow>
    <flow name="processhl7vm" doc:name="processhl7vm" >
      <vm:inbound-endpoint path="processhl7vm" doc:name="VM"/>
    	<set-variable variableName="warnings" value="#[groovy:new StringBuilder()]" doc:name="Warning Messages" />
        <set-variable variableName="originalhl7" value="#[payload:]" doc:name="Variable" />
			<enricher target="#[variable:messageId]" source="#[payload.id]" doc:name="Message Enricher">
			<flow-ref name="SaveADT" doc:name="Flow Reference" />
		</enricher>
		<set-payload value="#[groovy:payload.replaceAll('\\|ADT\\^A\\d\\d\\|', '|ADT^A01|')]" doc:name="Processing everything as A01" />
		
		<!-- all doc:name="All"> <processor-chain -->
		<logger message="&quot;received from  = &quot; #[payload]" level="DEBUG" doc:name="Log NEW" />
		<hl7:hl7-encoding-transformer name="HL7_Encoding_Transformer" hl7Encoding="XML"
			doc:name="Transform A01 to XML" />
		<set-variable value="#[payload]" variableName="orginalXML" doc:name="Variable" />
		<set-variable variableName="eventType" value="#[xpath('/hl7xml:ADT_A01/hl7xml:EVN/hl7xml:EVN.1').Text]"
			doc:name="Variable" />
		<set-variable variableName="controlID" value="#[xpath('/hl7xml:ADT_A01/hl7xml:MSH/hl7xml:MSH.10').Text]"
			doc:name="Variable" />
		<logger level="DEBUG" doc:name="Log XML original" message="#[payload]" />
		<choice doc:name="Choice">
			<when expression="#[groovy:eventType == 'A18' || eventType == 'A38']">
				<enricher doc:name="Message Enricher" target="variable:dummy1">
					<processor-chain doc:name="Processor Chain">
					<set-payload value="#[eventType] is not supported yet" doc:name="Set Payload"/>
					<flow-ref name="messageUnsupportedLogging" doc:name="Flow Reference" doc:description="logging"/>
					</processor-chain>
				</enricher>
			</when>
			<otherwise>
				<enricher doc:name="Enricher PatientFlow">
					<flow-ref name="mule-ucsf-insert-patient" doc:name="Insert Patient Flow" />
					<enrich source="#[flowVars.?pId]" target="#[flowVars['pId']]" />
					<!-- if savePatient is there it is upsert operation if only pId is present it is insert operation -->
					<enrich source="#[flowVars.?savedPatient]" target="#[flowVars['savedPatient']]" />
					<enrich source="#[flowVars.?mappedPatient]" target="#[flowVars['mappedPatient']]" />
					<enrich source="#[flowVars.?saveInpatientRoles]" target="#[flowVars['saveInpatientRoles']]" />
				</enricher>
				<choice doc:name="Choice">
					<when expression="#[pId instanceof NullPayload]">
						
						<set-payload value="&quot;Failed&quot;" doc:name="Set Payload" />
					</when>
					<otherwise>
						<set-payload value="&quot;Success&quot;" doc:name="Set Payload" />
					</otherwise>
				</choice>
				<byte-array-to-string-transformer doc:name="Byte Array to String" />
				<flow-ref name="updateSalesforce" doc:name="Flow Reference" />
				<!-- /processor-chain > <flow-ref name="SaveADT" doc:name="Flow Reference"/> </all -->
				<set-payload value="#[originalhl7]" doc:name="Set Payload" />
				<hl7:ack-component ackCode="AA" doc:name="HL7 ACK" />
			</otherwise>
		</choice>
			<logger level="INFO" message="Payload is: #[payload]" doc:name="Logger" />
		<vm:outbound-endpoint path="reply" doc:name="VM"/>
		<catch-exception-strategy doc:name="Catch Exception Strategy"> 
			<set-payload value="#[originalhl7]" doc:name="Set Payload" />
			<logger level="ERROR" message="Payload is: #[payload]" doc:name="Logger" />
			<choice doc:name="Choice">
				<when expression="flowVars['messageId'] != null">
					<tracking:custom-event event-name="Rejected Message" doc:name="Custom Business event">
						<tracking:meta-data key="Message id" value="#[message.id]" />
						<tracking:meta-data key="Payload" value="#[payload]" />
						<tracking:meta-data key="ExceptionMessage" value="#[exception]" />
					</tracking:custom-event>
					<enricher doc:name="Message Enricher" target="variable:dummy">
						<flow-ref name="messageErrorLogging" doc:name="Flow Reference" />
					</enricher>
				</when>
				<otherwise>
					<logger level="ERROR" message="Salesforce Connection error might have occoured" doc:name="Logger" />
				</otherwise>
			</choice>
			<!-- <vm:outbound-endpoint path="DeadLetterQueue" doc:name="VM"/> -->
			<!-- send to MMC -->
			
			
	        <enricher doc:name="Message Enricher"  target="variable:dummy1">
	        <processor-chain doc:name="Processor Chain">
	          <set-payload value="Error processing HL7 document #[exception]" doc:name="Set Payload Error Message"/>
	            <flow-ref name="sendemail" doc:name="Flow Reference"/>
	           </processor-chain> 
	          
	        </enricher>
	        
	        <choice doc:name="Choice">
				<when expression="#[exception.causedBy(org.mule.api.ConnectionException)]">
				 <logger level="ERROR" message="NOT creating any log and replying to the main thread as cloverleaf is setup to retry only if it does not get anything back" doc:name="Logger" />
				</when>
				<when expression="#[exception.causedBy(org.mule.api.expression.ExpressionRuntimeException)]">
					<hl7:ack-component ackCode="AE" doc:name="HL7 ACK" />
					<vm:outbound-endpoint path="reply" doc:name="VM"/> 
				</when>
				<otherwise>
					<hl7:ack-component ackCode="AR" doc:name="HL7 ACK" />
					<vm:outbound-endpoint path="reply" doc:name="VM"/> 
				</otherwise>
			</choice>
			<logger level="INFO" message="ACK Payload #[payload]" doc:name="Logger" />
			<logger message=" Warnings during processing #[warnings]" level="WARN" doc:name="Logger" />
			
		</catch-exception-strategy>
    </flow>
	
</mule>